// Code generated by go-bindata.
// sources:
// resources/custom.css
// resources/embed_html.py
// resources/environment.yml
// resources/jupyter_to_print.py
// resources/no_code.tpl
// DO NOT EDIT!

package pubpub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesCustomCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x8e\x9c\x30\x0c\xbd\xf7\x2b\x90\x56\xd5\x5c\x0c\x82\x81\xd9\x56\x70\xaa\x7a\x68\x4f\xab\xfe\xc1\xc8\x80\x21\xe9\x84\x24\x4a\xc2\x2e\x53\xb4\xff\x5e\x85\xc2\xc2\xcc\x54\x9a\xaa\x5a\x4e\xd8\x79\xf6\x8b\x63\x3f\xd7\xfc\x39\xaa\x54\x4d\xc7\x8a\x84\x18\x35\xd6\x35\x97\x6d\x1e\x17\xa5\x32\x35\x99\x3c\x7e\xf5\x00\xd5\x3b\xdd\xbb\x23\x1a\xc2\x20\x32\x24\x6b\x32\x54\x1f\x99\xeb\x44\xc0\xbb\x76\xec\xd0\xb4\x5c\x86\x82\x1a\x97\x63\xef\x54\x31\x3b\x0c\x6f\xd9\xec\xa9\xb9\xd5\x02\xcf\x79\x29\x54\x75\xba\xcd\x39\x1b\xb6\x2f\xbd\x3d\xbe\xf0\xda\xb1\x3c\x89\xe3\x8f\x45\x87\x43\xb8\x9a\xf7\x22\x17\x93\x06\xaa\x7a\x47\x47\x43\xb6\x17\x6e\x5c\xd8\xa5\x92\x74\xaf\x20\x87\xa5\xa0\x7f\x28\x69\x9b\x47\xcb\xf6\xff\x1e\xe2\x8a\xdb\x37\x02\x4e\x65\x0d\xda\x10\x58\xec\x34\x68\x60\x09\xb0\x3d\xb0\x14\x58\x06\xec\x00\xec\x11\x04\x07\xab\x51\x8e\x95\x12\xca\xe4\x0f\x59\x9a\x65\xd9\xa7\xbb\xa9\xc6\x46\x49\x17\x36\xd8\x71\x71\xce\x77\x5f\x55\x6f\x38\x99\xe0\x89\x5e\x76\xc5\x74\x62\xf9\x2f\xca\x93\x54\x0f\x45\x89\xd5\xa9\x35\xaa\x97\x75\x38\x53\x34\xd3\xb7\xce\xc4\x15\x97\x06\xc1\x2f\xd3\x7f\x23\x65\x5a\x8e\x37\xa9\x1d\x0d\x2e\x44\xc1\x5b\x99\xff\xec\xad\xe3\xcd\x79\x79\x22\xa7\x74\x9e\x50\xb7\x98\xa5\x72\x4e\x75\xde\x73\x4d\xc6\x92\x71\x4d\x9a\x66\x7a\xb8\x01\xec\xb7\x80\xf8\x2f\x80\xe4\xf2\xb2\x3f\x8c\x1a\x78\x87\xc1\x93\x7a\xc6\x1d\x04\xbb\xef\x24\x9e\xc9\xf1\x0a\x83\x27\xea\x69\x07\xc1\x9b\x03\x82\x2f\x86\xa3\x80\xc0\xa2\xb4\xa1\x25\xc3\x9b\xd7\xab\xe6\x44\x2c\x81\x88\xed\x21\x62\x29\x44\x2c\x83\x88\x1d\x20\x62\x8f\xef\xc9\xf8\x60\x79\x2b\xd1\xf5\x86\x02\xbd\x29\x35\xc9\xf4\x50\xbc\x23\x4d\x44\x1d\x72\xb1\x4c\x59\x1c\xa7\x87\xcf\xd3\x36\x78\x90\xca\x51\xa9\xd4\x69\xdc\xb4\xee\x10\xeb\xe1\xba\x77\xb1\x7f\xfb\x69\xbf\xf8\xd5\xb2\x0a\xf9\x31\x5e\xfb\x7c\x4f\x60\x5c\x4e\xfa\x32\xaa\xd3\x0e\xb6\x8a\x9b\x3c\x17\x82\x0b\x93\x84\x86\x35\x68\x8b\x7e\x31\xa8\x35\x99\xf1\xee\xac\xf9\x18\x3f\xa3\xc7\xf9\xca\x6f\xf0\x70\x7f\x53\xdf\xe4\x9a\x17\xe6\x84\xd9\xda\x33\xc6\xbb\xfe\xa8\xc6\x4b\x49\xa0\xb6\x94\x2f\x3f\xcb\x81\x0f\xf5\x8b\x69\xb1\xe7\xd0\x69\x57\x7d\xf8\x1d\x00\x00\xff\xff\x7e\x21\xfa\xed\x9f\x05\x00\x00")

func resourcesCustomCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesCustomCss,
		"resources/custom.css",
	)
}

func resourcesCustomCss() (*asset, error) {
	bytes, err := resourcesCustomCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/custom.css", size: 1439, mode: os.FileMode(420), modTime: time.Unix(1504129565, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesEmbed_htmlPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x55\x4d\x6f\xdc\x36\x10\xbd\xeb\x57\x0c\xb6\x07\x69\x53\x99\x41\x53\x23\x28\x5c\xe8\xd0\x0f\xb7\x0d\x90\x14\x41\x92\xf6\x12\x04\x0a\x25\x8d\x56\xac\x29\x92\x25\x29\x7b\x85\x20\xff\xbd\x18\x92\x5a\x69\xed\xad\x0f\x2b\x53\x7a\xf3\x1e\x39\x6f\x66\xb8\xdb\xed\x6e\xc7\x06\x3b\x38\x58\x6e\x06\xd1\x3a\x10\xca\x6b\xf8\xe3\xc3\x9b\xd7\x70\x7b\x34\xda\x7a\xb4\xd0\x4a\xee\xdc\x6e\xb7\xcb\x32\x31\xd2\x2b\x68\xb8\xc3\x97\xd7\xcb\x4a\x8c\x87\xa1\xb3\xcb\x4a\xbb\x2c\xf3\x76\xbe\xc9\x00\x00\xbe\x81\xb7\xb3\x1f\xb4\x82\xef\x59\x58\xf7\x56\x8f\x30\x59\x29\x45\xc3\x2c\xfe\x3b\xa1\xa3\xf0\x10\x37\x59\xa9\x0d\xaa\x0c\x8f\x2d\x1a\x0f\xaf\xc2\xdb\x5b\x6b\xb5\x7d\x44\xf5\xe2\x09\xd5\x8b\xc7\x1c\x59\xf8\xa8\x9a\x56\xab\x7b\xb4\x9e\x61\x3a\x89\x63\x83\x1f\xe5\x82\xa6\x43\x2e\x67\x8c\x11\x8d\xbb\x5e\x3e\xfe\x8c\x7c\xf2\xa2\x9f\xe4\x7b\x3d\x99\x2c\xcb\x3a\xec\xa1\xe3\x9e\xd7\xa2\x9f\xeb\xc9\xca\x62\xb2\x72\x1f\x77\xb6\xdb\xed\xde\xa1\x91\xbc\x45\x70\x7a\xb2\x2d\xc2\x5f\xef\x5e\x83\xb6\xd0\x0b\x89\x20\x85\xba\x83\x07\xe1\x87\x94\xb5\x2b\x54\xad\xee\xb0\x83\x46\xea\x86\x51\x56\x89\x43\xf4\xb4\x79\xe6\x3c\xb7\xde\x11\xba\xc8\x49\x2d\x4f\x12\xf4\x67\xd1\x4f\x56\x11\x2c\xbc\x42\x79\x21\x66\xf0\xde\x6c\x63\x88\x03\xaa\x25\x2f\x61\xcf\xcc\x22\xef\x8a\x7d\xe2\x70\xb8\x82\xc3\x26\x17\x5c\x09\xb9\x6d\xf2\x3d\x70\x07\xfd\x0a\xd9\x70\xf6\x0b\x51\x72\xe7\x83\x9d\xc1\x6b\x10\xaa\x47\x0b\xbd\xb6\x23\xf7\xd1\xa3\x80\x17\xde\xa1\xec\xa3\x73\x62\xe4\x07\xac\x13\xa4\x4a\xe5\xc3\x1e\x06\xee\x8b\x3c\x2f\x61\xa8\x28\x62\x9f\x68\x5f\xf5\xe0\x07\xe1\xa0\xe7\x42\xba\x12\x2c\xca\x19\xb4\x02\x3f\x60\x4c\x2f\x1e\x3d\x2a\x27\xb4\x62\x4b\x1e\xcf\xe8\x85\x83\x3f\xb5\xda\x1c\xf2\x91\xb8\x76\xcc\x70\x3f\x30\x67\xa4\xf0\x78\xf4\x21\x45\x1f\xbf\xfb\x94\x5d\x64\xab\x2a\xc8\xdd\xfd\x21\x5f\xe9\x46\xec\x04\xaf\xfd\x6c\x10\x2a\xc8\x03\xf8\xb9\xbb\x3f\x7c\x7b\x1c\x65\xbe\xda\xf4\x84\xc4\x74\xfd\xff\x92\x70\x63\xa4\x68\xb9\x17\x5a\x3d\x27\xdc\x05\xa7\x2e\xa9\x7e\xf9\x9a\xb3\xa8\x50\x6c\xe5\x92\x3f\xcd\xcb\xeb\x3a\x19\x17\xcb\x90\x35\x2f\xaf\x63\x25\x16\x21\xdd\xac\xc3\xb0\xc8\x27\xdf\x5f\xfd\x90\xc7\xf4\x87\x82\x9f\xac\x20\x15\xfa\xff\xe6\xcb\xd7\x1f\x63\x78\xb9\x91\x5b\x77\x53\x9e\x74\x62\x7c\x2a\xd9\x85\x26\xb5\x11\xd2\xc0\xa9\xa9\x13\x0b\xfa\x59\xbb\xe8\x8d\xee\x44\x3f\x43\xee\x6c\x9b\x03\xf7\xde\x8a\x66\xf2\x08\x42\x85\x56\xcd\x1d\x1d\xf5\x90\x83\xe7\x07\x47\xa5\x16\x78\x52\x79\xc5\x8a\x20\x18\x5b\xd8\xc2\xd3\xe9\xc9\x40\x75\xde\xcd\x41\xb5\x84\x9c\x1e\xcc\x70\xeb\xd0\xa6\xf3\xf6\xda\x52\x39\xd6\x9e\x1f\x88\x92\x82\x59\x2f\x54\xf7\x93\x94\x45\xd0\xde\xb4\x16\x61\x69\x8f\x25\x68\xd9\xd5\xf7\x5c\x52\x44\x0a\x66\xf4\xc1\x31\xe1\x71\x74\xc5\xfe\xbc\x7d\x44\x1f\xc2\x98\xd4\x0f\x68\x8b\x7d\xac\x29\xdb\xe6\xe7\xa8\x58\xaa\x1b\xb2\x8f\xf4\xfb\x09\xaa\xf3\x21\x94\xa4\x53\x37\x53\x3e\xba\x94\x5a\xa8\xc0\x79\x5b\xd0\x11\xce\xbc\x38\x03\x65\x59\x16\x66\x3b\x84\x3b\x60\x3b\x0f\x8b\xed\x62\x75\x28\x3c\x6f\x46\xdd\xdd\x7c\x3e\x4d\xd7\xcf\xeb\x45\xf1\x30\x88\x76\x88\x12\x6e\xbd\x51\xb8\x4b\x35\xb7\xde\x2d\xd1\xa4\x5f\x22\x01\x2c\x17\x0e\x57\x5d\x32\xf5\x14\x5b\xbc\xfd\xf5\xb7\x12\xde\xff\xfd\x7b\xf8\x68\xb9\x23\x99\x50\xdf\x6e\xbf\x75\x3d\xda\x27\x24\x46\xe6\xdb\x23\x1f\x8d\x44\x98\x1c\x3f\xe0\xcd\x9a\xda\x7f\x26\x33\x13\xc3\x69\xf3\x70\x75\xe5\x35\x50\x2e\xea\xa8\x3c\xce\xb5\xd2\x1e\x1b\xad\xef\x98\x30\xb3\x6a\x4e\x47\x8f\x1d\x81\x7d\x98\x6a\x27\x50\xad\xa8\x6b\x68\xb8\x95\xa0\x1a\x1a\x50\xf1\x0e\x70\x15\xcd\x9d\x12\x9e\x3d\xbb\x7b\xd8\x54\x80\x9e\xbc\x99\xfc\x06\x46\x3e\x4d\x06\x6d\x71\x66\xff\x13\x3f\x4a\x20\x89\x3d\xbb\xa0\x7d\xa6\xba\x3f\xd1\x9c\x8c\x8e\x92\x50\x6d\xfb\x2e\xbe\xdb\x3f\xbe\x5b\x1e\xc5\x6c\x78\xff\x0b\x00\x00\xff\xff\xb8\xac\x90\x1a\x28\x08\x00\x00")

func resourcesEmbed_htmlPyBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEmbed_htmlPy,
		"resources/embed_html.py",
	)
}

func resourcesEmbed_htmlPy() (*asset, error) {
	bytes, err := resourcesEmbed_htmlPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/embed_html.py", size: 2088, mode: os.FileMode(420), modTime: time.Unix(1495665532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesEnvironmentYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\xdd\x76\xbb\xae\x12\xbd\xcf\x53\xe4\x05\xa4\x42\x34\x1f\x5d\x6b\x1e\xe3\x5c\x67\xa1\x8e\x91\x06\x81\x02\xfe\x52\xf3\xf4\x67\x0d\xda\x06\xdb\xff\xa5\x7b\x18\xd8\x33\xb3\x67\x6b\xe4\x88\xef\x7b\x37\x35\x6e\x6a\x76\xed\x20\x8d\x41\x1d\xde\x77\xc5\x5e\x1a\xd9\x5a\xd3\xc9\xa2\x9f\x82\xb2\x66\x57\xec\x3b\xec\xe5\xa4\x63\xd8\x75\xe8\xd0\x74\x68\x5a\x85\xe9\x68\xa3\x51\xb6\x03\x70\x56\xb3\x12\xdc\x7c\x38\x5e\xcb\x5d\xb1\x6f\xe7\x56\xa3\x87\x92\xf1\x32\x87\x3b\x6c\xad\x97\xd1\x7a\xa8\x58\xc9\x38\x7f\x45\xd0\x44\x3f\x3b\xab\x4c\x0c\x50\x32\xc1\xc4\x12\xe2\xbb\x62\xdf\x7b\xc4\x38\x3b\x04\xc1\x6a\x56\x83\xd8\x15\xfb\xa1\x76\x33\x08\x76\x62\x25\x18\xc7\xb9\xf8\xb9\x66\xe8\xfa\x1a\x38\x3b\x33\x7e\x02\xca\x1d\xe2\xa8\x6b\xad\x1a\x28\xd9\xe5\x72\x79\x3d\xa7\xda\x09\xea\x8a\x71\x48\x1f\x6e\xbe\xa3\x37\xa8\xa1\x62\x47\x96\x91\x52\x6e\x8e\x83\x35\x70\x64\x3f\x55\xf0\x17\x7c\xbd\xa1\x99\xa2\xd2\x0b\xe1\x72\x93\xf6\x50\xdd\x0d\x63\xc8\x33\x29\xf2\xd1\xa8\x1b\x88\xf5\xd9\x0f\xec\xd4\xd2\xa1\xb5\x58\xaa\xec\x43\x99\x0f\x29\x40\xb0\x0b\x3b\x66\x79\x0e\x6f\x70\x69\x96\xb4\x60\x4d\x68\x07\x1c\x25\x08\x76\xdc\xdc\x3e\xb9\x39\xa2\x07\xfe\x7a\xf4\xf0\x82\xaf\xad\x56\x68\x22\xd4\xd4\xf9\x3f\x49\xd7\xd6\x9a\x60\x35\x42\xcd\xf8\x7f\xdc\x79\x6d\xad\x47\xa8\xd8\x21\x8f\x69\xd5\x38\x73\x03\xce\x8e\x4c\x9c\x12\xb7\x51\xfa\xfb\xe4\x82\xec\x91\x7a\x72\x78\x95\x35\xca\xe8\xb4\x8d\x34\x09\xc1\xa8\xe0\xed\xd8\x46\x15\xe2\x64\x28\xe9\xc4\xaa\xd7\x03\xe3\x5d\x83\x28\xf9\x29\x31\x26\xc0\x34\xad\x35\xff\xd0\xc7\x44\x33\xab\xc2\x34\xbd\xf5\xa3\x8c\xbf\x29\x1a\x1b\xb1\xb1\xf6\x9e\xaa\xce\xf1\x69\x74\x33\x70\xc6\x45\x7e\x8b\xd5\xd8\x2b\x4d\x34\xaa\x8c\x85\x75\x68\x42\xd0\xa9\xad\x42\x27\x1e\x4e\x9a\x4e\xa6\xb9\x13\xb3\x6d\x2d\x14\xb3\x6d\xaf\x74\x44\x1f\x80\xb3\x2a\x7f\xc1\xc9\x38\x30\x7a\xb9\x64\x87\x0d\x8e\x5f\x0e\x5b\xa2\xbf\x21\xe4\x54\x7b\xd7\x18\x06\xe9\xff\xf4\xc6\x29\xad\xed\x03\xaa\x6d\x1f\x9c\x72\x70\x79\x0d\x98\xd4\xea\xbc\x1d\x5d\xbc\x46\x6b\xf5\x5d\xc5\x54\x05\xcf\xef\x89\xb3\xf3\xb6\xc5\x40\xe5\xd4\x9b\xbb\xe6\xdb\x88\xb4\x8f\x62\x2b\x6f\x37\x3b\xe9\x83\x32\x49\xc9\x1b\x4a\xf3\x27\x0d\xe6\x47\x93\x22\x61\x69\x83\x0e\x69\xb1\x5e\x40\xd1\xc9\x88\xb4\x3c\xbf\x35\xec\xe6\xf8\x5c\x66\x2e\x72\xf0\x39\x7e\x02\x3f\xb2\x32\x47\x3f\xe3\xb7\x66\x7f\x0d\xdd\xa3\xec\xb4\x32\x08\x47\x26\xd2\x9b\xa1\x55\x77\x15\x0b\x8d\xd2\x1b\xda\xb8\xf3\x66\x68\x7c\x39\xe1\x66\x0a\x5d\xfe\x58\x4a\x40\xd9\xd8\x94\x77\xca\xbb\x13\x30\x4e\x8e\x9a\x1a\x40\x9c\xb6\x0d\x0a\x6a\x74\x1a\x6f\x68\xd0\xab\x16\x4a\x72\xa3\xd7\x38\x82\x72\x34\xb4\x73\x7e\xfc\x8b\x94\xb8\xd1\x67\xf8\xd4\x2a\x22\x1c\x18\xa7\xca\x08\x89\xe8\x47\x65\x64\x67\xa1\xcc\x9d\x21\x62\x88\x24\x2a\x28\xd9\x21\x43\xef\x70\xa6\x61\x9e\x97\x54\xeb\x53\x62\xb5\x9d\x6f\xf4\x52\x45\x4d\x2e\x45\xfd\xcb\x1a\xfb\x68\x1f\xaa\x4b\x57\x72\x76\xca\xe0\x01\x51\x93\xe6\x2f\x39\xd3\xd5\xe9\x4c\x83\x5f\x11\x0d\xfd\x2d\xd2\x86\x67\x27\xbe\x9e\x50\x27\x47\xa7\xf2\x9f\x64\x01\x9c\x09\x76\x86\xc3\xa2\xd7\xf7\xdd\x7e\x5f\xec\x1b\x94\x53\x54\xfd\xa4\x83\x9d\x5c\x05\xc9\x89\xcb\x25\x12\x2a\x80\x92\x54\x9b\x3e\x57\xf3\x2d\x7e\xcc\x77\x71\xdf\x14\x5b\xcd\xaa\x58\x9d\x6e\xb1\xba\x6d\x64\x55\xcc\x62\x73\xbf\x42\x1e\x61\x91\x52\xc2\xef\xe8\x65\x80\x54\x4c\x95\x80\x65\x91\x8a\xef\x45\x5a\x37\xe9\x3b\x14\x6d\x33\xf5\x00\x87\x9f\x7c\x37\x93\x1b\x76\xf6\x61\x20\x75\x72\x3d\x39\xcf\x72\xd4\x74\x8e\x8b\x04\x50\xd3\xac\xef\x69\x97\x49\x05\x6b\x72\x1c\x50\x1a\x4b\x89\x97\x6f\xc4\x5a\xfd\x84\xa4\xa6\x35\xf1\xb3\x1b\x89\x2f\xaf\xd7\x13\x0f\xf4\xf7\x27\x4e\xb7\xf4\x9c\x60\x62\xe7\x3c\xf6\xea\xeb\x7d\xff\xf6\xbf\x80\x3e\xbc\xc9\x29\xa0\x7f\xfb\xfe\xb5\xbf\xa1\xf9\x17\xde\xd6\x7f\xff\xee\xff\x01\x00\x00\xff\xff\x8a\x1f\x80\x8e\x0a\x08\x00\x00")

func resourcesEnvironmentYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEnvironmentYml,
		"resources/environment.yml",
	)
}

func resourcesEnvironmentYml() (*asset, error) {
	bytes, err := resourcesEnvironmentYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/environment.yml", size: 2058, mode: os.FileMode(420), modTime: time.Unix(1504131833, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesJupyter_to_printPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x6f\xec\xb8\xcd\xbe\xf7\xaf\xe0\x26\x17\xb2\xf1\x7a\x9c\x2c\x5e\xa0\x17\x83\xba\xc0\x41\x36\xdb\xaf\x3d\x49\x70\x9a\x6e\x2f\xd2\xc0\x90\x6d\xce\x8c\x36\xb6\xe4\x4a\x72\x26\xd3\x20\xff\xbd\xa0\x24\x7f\x65\x66\x0e\xd0\x8b\x06\x07\x67\x6c\x99\x22\x1f\x52\xe4\x43\xea\x12\x2e\xe1\xf1\xfe\xa7\xfb\x35\x3c\xf4\x16\xec\x4e\x18\x10\x12\x38\xd4\xaa\x7a\x41\x0d\x95\x92\x96\x0b\x89\x1a\xac\x82\x96\x4b\xbe\x45\xa8\xb1\x43\x59\xa3\xac\x04\x9a\xe8\xf2\x07\xb8\xea\x8d\xbe\x2a\x85\xbc\x42\xf9\x0a\xdd\xc1\xee\x94\x8c\xa2\x8d\x56\x2d\x28\x93\x75\xdc\xee\x40\xb4\x9d\xd2\x16\x4c\xd7\x08\x8b\x6f\x36\x05\x7c\xb3\x06\xbb\x14\x6a\xa1\x25\x6f\x31\x05\x5e\x1a\x92\x4c\xa1\xe4\x06\xfd\x12\xbe\x09\x63\xcd\xa0\x68\xd0\x51\xf5\xba\x16\x3a\x85\x6a\xe7\x7e\x34\xb6\xea\x15\xa3\xf0\x91\xeb\x6d\xc7\xb5\x19\xdf\xcd\xc1\x44\xc3\xb3\x15\x2d\x7a\x65\xdb\x46\x95\x83\x3a\x7a\xf6\xab\xf6\x5f\x75\x3b\xac\xd2\x73\x70\xc1\x6a\x2e\x6c\x83\xd6\x64\x95\x92\x1b\xb1\x1d\x44\x6e\xdc\x9b\x97\x91\x65\xa5\xe4\x2b\x6a\x9b\x75\x1a\x3b\xad\x2a\x34\x46\xe9\x11\xf2\xed\x1b\x56\xbd\xc5\x87\xd9\xb7\x01\x94\x2c\x37\x4a\xb7\xdc\x7e\xd2\x33\xec\xfc\xd3\xe3\xd7\x5f\x6e\xdf\xe8\x11\x75\x14\x45\xce\x37\x0d\xf9\xe8\x67\xf6\x45\x6f\xfb\x16\xa5\x7d\x70\x5f\xe2\x08\x00\xa0\x46\x53\x69\xd1\x59\xa1\x64\xce\xbe\x21\xed\x16\x9b\xc3\x1a\xfe\xd2\x77\x07\x8b\x1a\xa4\xb2\x58\x2a\xf5\x42\x27\xaa\xdd\xe7\x95\x07\x61\xb1\x76\x16\x33\x60\x4e\xd1\xfc\x8f\xdd\x77\x56\xb4\xe2\xdf\x58\xc3\x46\x69\xe8\xb8\xb1\x42\x6e\x41\x48\xab\x80\xc3\x1f\x95\xda\x36\x48\x39\xc3\x92\x80\x32\xe3\x75\x5d\xf0\x00\x2f\x66\x42\x16\x1b\xd1\x60\x41\x87\xcc\x52\x68\xd1\xf2\x57\xae\x73\xf6\x33\x4b\xc1\x1e\x3a\xcc\x8d\xd5\x29\x48\xae\xb7\x26\x67\xff\xc7\xd2\x23\x00\xf4\xb7\xc3\xa6\xcb\xd9\xe3\x0e\xc1\x65\x95\x55\x60\x77\x38\xf9\x43\x06\x68\xb1\x44\x08\x71\xc4\xfa\x1c\x9e\x55\xd7\xb2\x14\xd8\x6a\xb5\x17\x76\xb7\xea\x0e\x2d\xd7\x2f\xb5\xda\x4b\x96\x42\x8d\x1b\xde\x37\x36\xff\x99\x37\x06\x4f\x03\xe1\x95\x8f\xae\xb1\x4a\x63\x61\x75\x8f\xdf\x45\x7c\x2b\x79\xd9\x20\x3c\x1c\xbe\x06\x2b\x10\x12\x41\xc8\xed\x59\x80\x2b\xa9\x56\xd8\x96\x58\xaf\x44\xcb\xb7\x68\xfe\x27\xc8\x7e\x12\xc6\x41\xa3\x63\x07\x67\x07\x9c\xcd\xfa\x3c\xb2\x8b\xd5\x4a\xf5\xb6\xeb\xed\xc5\x69\xc5\xe3\xd1\xde\x9f\xb1\x3c\x1e\xf7\xc9\xaf\x83\x8f\x81\x19\xe2\x40\x0c\x71\xe1\xf3\xa7\x48\x92\x24\xa2\x2c\x81\x1c\x02\x3a\xf7\x43\xf8\x4c\x9c\x44\x11\x31\x98\x17\xad\x85\x76\xe9\x06\x39\x9c\x57\x16\x45\x15\xe4\xa1\x98\x69\xbb\xd8\x50\x71\x99\x8c\xd2\xa2\x98\xd2\x62\xed\xb0\x5a\x7d\x58\x8f\xa0\x2f\xe1\x4b\x5d\xc3\xbc\xe0\x29\xf7\x6a\x62\x49\xbf\x67\xe5\xa9\x10\x34\x91\xa5\x16\x72\x9b\x8d\x7b\x5d\xb5\xff\xe6\xeb\xb1\x20\x8a\xd5\xa2\x2c\x64\x89\x6f\x16\xa5\x11\x4a\x9a\x6c\xa4\x82\xc2\xf4\x9d\xe3\x82\x40\x09\x9d\xc6\x19\x2e\xa7\x11\xdf\x2a\xec\x2c\xfc\xd9\x09\xdc\x6a\xad\xf4\x84\xb2\xd3\x82\xb2\xe9\x86\x4b\xa9\x2c\xe0\x51\x22\x0e\xda\xb9\x01\x61\x41\x18\xaa\x26\x10\xd2\x58\xde\x34\xae\x7a\x9c\x81\xc6\xe0\xa4\xb2\xca\xe6\xb4\xb4\xa4\xbc\x8c\x77\xd4\x1b\xe2\xc5\xd1\x2e\x21\x67\x93\xf5\x39\x23\x26\xd1\x64\x25\x80\xbe\x53\x16\x7a\xaa\x91\x19\x60\xe6\xcf\x88\x50\xba\x73\x92\xaa\x70\x09\x5b\xf8\x22\xf1\xfb\x5d\x78\xfd\xf2\xce\xb6\xcd\xc8\xc3\xb4\xb2\xa0\x54\x12\x1e\x5e\x20\x3f\x21\x30\x61\x9a\x89\x2d\x59\xf9\x12\x1e\xb1\xed\x1a\x6e\x11\x1a\xf1\x8a\x06\x24\xbe\x59\xcf\x4d\xc2\x40\xd9\x8b\xa6\x76\xcc\x94\x82\x51\xc0\xeb\x1a\xec\x8e\xbb\xef\x06\xb9\xae\x76\x8e\xca\xb2\xe8\x53\x50\x6d\x50\xe9\x12\x78\x08\xea\x71\x6a\x27\xce\x7a\xd3\xd0\xd9\x59\x05\xbd\x41\x50\xbd\x86\xaa\x37\x56\xb5\xbe\xa8\x07\x4d\xe7\x4d\x38\xda\xcc\x81\x49\x55\x54\xaa\x46\x16\x45\x38\x0b\x49\x78\x8c\x7d\xf7\xcb\xab\x24\x8a\xa8\x01\x88\xfa\x2d\x85\x91\xd1\x69\x64\x40\xd9\xb7\xa8\xb9\xc5\xd8\x1d\xcc\x9c\xf0\x13\x1f\x42\x73\x30\x99\xb1\xb5\xea\x6d\xb6\xd7\xc2\x62\x3c\x09\x44\xbe\xa2\x26\x85\xf9\x30\x11\xcc\x84\x32\x8d\x5d\xc3\x2b\x8c\x19\x10\x77\xff\x13\x28\x19\x68\xa3\x56\xca\xce\xaa\xfc\x93\x5a\xb1\x09\x02\x39\x30\x36\xa5\x71\xd8\xc4\x32\xdf\xec\x2c\x75\x79\xc8\xc7\xf9\x63\x6e\xd7\xcd\x2d\x31\xcb\x44\x77\x90\x25\x4b\x9e\xae\x9f\xe9\xd8\x3d\xe4\x6f\x6e\x00\xa1\x1c\x5f\xb9\x81\x85\xd2\xf5\x15\xb5\xab\x62\x50\x1b\x9f\x05\x9d\x32\x96\x70\x08\xcb\x0c\xf5\x2c\x8d\xc1\xe1\x71\x4b\xee\x26\x91\x98\xbd\x7f\xbc\x7f\x64\x94\xb4\x2c\xf3\x4d\x39\xa6\x97\xc2\xcf\x46\x0e\x63\x32\x04\x4b\x6c\xa0\x41\x19\x0f\x2a\x12\xf8\x03\xfc\xb8\x0e\xdf\x9c\x83\x5c\x18\x84\x5f\x79\xd3\xa3\x23\x85\x98\x3a\xa7\x46\x30\x3b\xd5\x37\x35\x75\x49\x6e\xa1\x25\x64\x3f\xfa\xd6\x49\x9c\xe7\xf1\x3a\x43\x6c\x30\x84\xcd\x91\xa9\x3c\x5f\xda\xba\x84\xbf\x22\x76\xae\x1d\xd7\x54\x09\x42\x6e\x94\x1b\x14\x68\x85\xbc\x9f\xc9\xce\x7c\x1e\x1e\x29\xa2\x93\x00\x69\x28\x9c\x86\xd9\x71\x8c\xb6\x87\xd3\x58\xb1\xe4\x69\xfd\xff\xf3\x7d\x07\xe4\x3a\x85\x56\xa5\x50\xf3\x03\xe4\xf0\x44\x2c\x22\x44\xe2\x80\x08\x41\x49\x3a\xaa\x9e\xef\xf3\x33\xe4\x64\x61\x74\x7b\xa8\xfd\xc1\xc7\x1b\x8d\xe4\x9c\xc4\xfd\xf7\xbc\x94\x6a\x0f\xb9\x1b\x37\xb3\x46\x55\xbc\xa1\xa7\xd8\x2b\x6d\xc9\x25\xa9\xf6\x99\x6d\x8b\x56\x79\xf6\xf6\x58\x87\xc5\x9a\x1f\xa2\xc1\x97\x69\x99\xde\xa2\x00\xe5\x2b\x7f\xa1\x2a\xa7\x0e\xec\x8f\x8d\xc2\x13\xbe\xa9\xde\xfa\xaa\xa3\x35\x4a\x6e\x4a\xa7\x45\x36\x0d\x23\xf8\x2c\xbd\x9f\xae\x9f\x87\x81\xdc\xa3\x3c\xa1\x65\x35\xfc\x5b\xe6\xe6\x22\xe2\x43\x7e\x7a\x0a\x0e\x34\x75\xa2\xf9\x4e\x96\xbd\xa8\x9b\xe4\xe3\x61\x43\x42\x7e\xcc\x06\x61\x03\x7b\x14\xba\x5e\x00\x83\x1c\x2e\xde\x3f\xae\xde\x3f\x2e\x06\x20\x8e\x72\x7c\x50\xd2\x25\xfe\x40\x11\x2e\xb7\x55\x87\x72\x32\x9f\xc2\x85\xbe\x48\xa8\xf3\x69\xe4\x75\xb1\xe9\x26\x6e\x90\x25\xc5\x3e\xcc\xe6\x19\x7d\x8e\x83\x4c\x0a\xdc\x14\xa1\xbe\xf3\x51\xe2\xee\xbe\xb8\xb9\xbf\xfb\xf5\xf6\xdb\x63\x32\xea\xc0\xce\xd1\xe7\xd1\xe8\x1f\x53\x3e\xa8\xde\xe6\xbf\xbb\xbe\x9e\x4b\xcf\x1a\x69\x2c\xcb\x14\xde\x19\x4d\x52\x35\xb7\x9c\xad\xe1\x9d\xb9\xc1\x79\x3d\xc6\xf5\xe3\x23\x38\x16\x32\xf3\x97\xdb\x2f\x77\xf0\xf7\x87\xf1\x61\x72\x05\xf7\x45\x85\x4d\x43\x03\xd3\xd3\xf3\x34\x81\xb8\x92\x48\xa1\x72\xdd\x63\xce\xde\xb2\xcc\x9c\x7c\xb2\x8e\x16\x5d\xdc\xcf\x3b\x52\xc9\x15\x75\x09\xb7\xd1\x2c\x04\xc4\xc6\x2d\x3e\x31\xfa\xbf\xa0\x29\x8f\x3d\xc3\x0f\x39\x30\xd7\x55\xd6\x47\xd3\xde\x88\x6c\xe8\x6f\xf4\x92\x1c\x89\xd1\x78\x24\x64\x8f\x9f\xd1\xfc\xed\x45\x74\x80\x6d\x67\x0f\xa7\xb1\x10\x61\x79\x3c\x46\xf5\xba\x42\xf6\xec\x68\xeb\xfa\x18\xc8\x39\x0b\x37\x0d\x72\x09\x7d\x17\xaa\x6d\x69\x21\xac\x2d\xa3\x3a\x44\x36\x94\xa7\x90\x21\x22\x41\x98\x3d\x1f\x1b\x1f\x3b\x88\xb1\x35\x6a\x6d\x8e\x04\xc4\x06\x18\x25\x32\x23\x75\x8d\x30\x36\xf6\xda\xb2\x17\x3c\x98\x38\x49\x8e\x55\x86\x5d\x5e\xec\xc9\x6f\xf6\x27\xe1\x6d\x9c\x38\x8b\xef\x87\x22\x84\x63\x87\xd5\x8b\x77\xaf\xfc\x0d\x2b\x1b\x0c\x9c\x04\xec\xd2\xf6\xbf\x05\xcc\x88\x98\xae\xba\x86\x0b\xe9\xf6\x0e\x0e\x38\x65\xcf\x61\xfb\x79\xec\x33\x97\xfd\x8e\xa7\xb9\xc2\xe7\xcc\x58\xae\xad\x21\x22\x88\xd9\xef\xd9\x77\x14\xd1\x5f\x01\xf9\x67\xfb\x9d\xea\xe2\xb9\xc6\xe4\x38\x48\xe1\x9c\x87\x84\xf6\xaf\x9f\xe4\x3e\x65\xc4\x68\xc7\x9c\x90\x42\x47\x1f\x42\xc9\xa2\x52\xbd\xb4\x4e\xfa\x4e\xc9\x4f\xc7\x73\xa6\x90\x66\x6c\xe6\x6b\xd2\x5b\x1b\xa5\x27\x01\x8d\xbe\x44\x28\x9b\xdf\x99\x9f\xf4\x88\x64\xd8\x1a\x8e\x67\xce\x8f\x19\xed\x7c\x73\x57\x9b\xc5\x2d\x3c\x03\xba\x9f\x8f\x1a\x53\xd8\xd3\x60\xd1\x34\x6e\x64\xef\x0d\x4e\x97\xa0\xb8\x54\xf5\x21\x9d\x44\x13\x37\x10\x84\xe9\x94\x46\xf8\x62\xd0\x59\x48\x55\xa3\x23\xc5\x51\x38\x9f\xb6\x4d\x7e\x2c\xee\x67\x30\x5e\x24\x2e\xfe\xa1\x85\x1b\x38\xac\x82\x59\xcf\x18\xda\x44\xb2\xe4\x9c\xa9\x53\x0c\x02\xd4\xe1\x6a\xcc\xd9\x9e\xb9\x6e\xb1\x39\xce\x9c\x4d\x18\x68\xc9\xa3\x19\xa7\xfb\x7b\xd9\xad\xfb\x11\x4a\xd2\x66\x5c\x5e\xcf\x66\x20\xfd\x70\xb6\xe7\x06\xb8\x0c\x62\x73\xb4\x6e\x25\x09\xce\xfa\x96\x79\xea\x3e\xf0\x9f\x00\x00\x00\xff\xff\x20\xd4\x4e\x88\xcf\x13\x00\x00")

func resourcesJupyter_to_printPyBytes() ([]byte, error) {
	return bindataRead(
		_resourcesJupyter_to_printPy,
		"resources/jupyter_to_print.py",
	)
}

func resourcesJupyter_to_printPy() (*asset, error) {
	bytes, err := resourcesJupyter_to_printPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/jupyter_to_print.py", size: 5071, mode: os.FileMode(420), modTime: time.Unix(1504132425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesNo_codeTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x41\x0e\x02\x21\x0c\x45\xf7\x73\x8a\x6e\xc8\xe8\xc6\x2b\x4d\x46\xa9\xc6\xc8\xd0\xa6\xb4\x89\x09\xe1\xee\x66\x5c\x88\x02\x6e\xfb\xde\xfb\x90\x1d\xe0\x53\x31\xfa\x04\xf3\xd5\x42\x38\x29\x87\xd9\x95\x69\xca\x0e\xce\x81\x2e\x0f\xb8\xc7\x85\x85\x36\x56\x70\x65\xbf\x62\xf4\x03\xf0\xed\xb3\xe9\x72\x13\x32\x7e\x17\x19\x92\x31\xca\xe1\x08\xa5\xed\x7f\xc4\xba\x40\xa6\x3b\x59\x05\xd7\x3f\x4f\x8f\x8d\xba\x80\x22\x24\x6d\xf4\x39\x56\x2f\xa9\xe0\xba\x2d\x49\x3d\x4a\xe7\x77\x70\xd4\x91\x75\x9f\x6b\xe1\x2b\x00\x00\xff\xff\x5d\x73\x97\xf9\x63\x01\x00\x00")

func resourcesNo_codeTplBytes() ([]byte, error) {
	return bindataRead(
		_resourcesNo_codeTpl,
		"resources/no_code.tpl",
	)
}

func resourcesNo_codeTpl() (*asset, error) {
	bytes, err := resourcesNo_codeTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/no_code.tpl", size: 355, mode: os.FileMode(420), modTime: time.Unix(1495736874, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/custom.css": resourcesCustomCss,
	"resources/embed_html.py": resourcesEmbed_htmlPy,
	"resources/environment.yml": resourcesEnvironmentYml,
	"resources/jupyter_to_print.py": resourcesJupyter_to_printPy,
	"resources/no_code.tpl": resourcesNo_codeTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"custom.css": &bintree{resourcesCustomCss, map[string]*bintree{}},
		"embed_html.py": &bintree{resourcesEmbed_htmlPy, map[string]*bintree{}},
		"environment.yml": &bintree{resourcesEnvironmentYml, map[string]*bintree{}},
		"jupyter_to_print.py": &bintree{resourcesJupyter_to_printPy, map[string]*bintree{}},
		"no_code.tpl": &bintree{resourcesNo_codeTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

